#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1f8a8ff9-c542-4f50-94d1-ebe32acae2d8

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int h_logF;
  int humidity;
  int temp;
  int t_logF;
  bool automatic_mode;
  bool fan;
  bool heater;
  bool humidity_display;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


// Include headers for display. Library is configured for the GC9A01 display.
/* pins are: 
  TFT_MOSI 11 In some display driver board, it might be written as "SDA" and so on.
  TFT_SCLK 12
  TFT_CS   10 Chip select control pin
  TFT_DC   7 Data Command control pin
  TFT_RST  8 Reset pin (could connect to Arduino RESET pin)
  TFT_BL   9 LED back-light
*/
#include <SPI.h>
#include <TFT_eSPI.h>
TFT_eSPI tft = TFT_eSPI();

// Include header for temperature and humidity sensor (DHT11).
#include <DFRobot_DHT11.h>
// Include iot headers. This allows for variables to be read or read and write to and from the cloud.
#include "thingProperties.h"

// initialise the pins for the temperature sensor and give it a name. Two DHT11's are used.
DFRobot_DHT11 DHT0;
#define DHT_PIN0 A0
DFRobot_DHT11 DHT1;
#define DHT_PIN1 A1


// Include header for LED lights, setup the I/O pin number (digital PWM), number of LEDs used in this project, brightness of the LED, LED type and colour order.
#include <FastLED.h>
#define LED_PIN     3
#define NUM_LEDS    19
#define BRIGHTNESS  64
#define LED_TYPE    WS2811
#define COLOR_ORDER GRB
// This sets up an array that we can manipulate to set/clear led data.
CRGB leds[NUM_LEDS];

#define UPDATES_PER_SECOND 100

// assign the I/O pin number for the fan and heater both are digital PWM.
const int fan_pin = 6;
const int heater_pin = 2;

void setup() {
  // Initialise the GC9A01 display.
  tft.init();
  delay(3000); // power-up safety delay
  // This tells the library the type of LED used, which pin DIN is connected to on the microcontroller, number or LEDS and colour order.
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
  // Tells the library the defined brightness.
  FastLED.setBrightness(  BRIGHTNESS );
  // Set the PWM pins for fan and heater as output.
  pinMode(fan_pin, OUTPUT);
  pinMode(heater_pin, OUTPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  // update the variables to the Arduino iot cloud.
  ArduinoCloud.update();
  // read the signals from the two DHT sensors
  DHT0.read(DHT_PIN0); // DHT1
  DHT1.read(DHT_PIN1); // DHT1
  // calculate the average temperature and log it using a separate variable. Having a separate variable to log the data allows the user to be able to change the desired data logging frequency.
  // The same applies for humidity.
  temp = (DHT1.temperature+DHT0.temperature)/2;
  t_logF = (DHT1.temperature+DHT0.temperature)/2;

  humidity = (DHT1.humidity+DHT0.humidity)/2;
  h_logF = (DHT1.humidity+DHT0.humidity)/2;
  
  // set conditions for the incubator.
  if (temp > 22) {
    // if the temperature is greater than 22 the screen background will turn red, and the text format will be changed so that the background of the text matches with the background of the screen.
    // the colour red is indicating to the user that the temperature is too hot.
    // the if statement for the variable automatic_mode is activated when true. This statement is determined by the user clicking on a switch on the Arduino dashboard in this temperature condition the fan will turn on.
    if (automatic_mode == true) {
      digitalWrite(fan_pin, HIGH);
    }
    tft.fillScreen(TFT_RED);
    tft.setTextColor(TFT_WHITE, TFT_RED);
  } else if (temp < 18){
    // if the temperature is less than 18 the screen background will turn blue, and the text format will be changed so that the background of the text matches with the background of the screen.
    // the colour blue is indicating to the user that the temperature is too cold.
    // the if statement for the variable automatic_mode is activated when true. This statement is determined by the user clicking on a switch on the Arduino dashboard in this temperature condition the heater will turn on (LED light on and set to colour red).
    if (automatic_mode == true) {
      digitalWrite(heater_pin, HIGH);
      fill_solid( leds, NUM_LEDS, CRGB::Red);
      FastLED.show();
    }
    tft.fillScreen(TFT_BLUE);
    tft.setTextColor(TFT_WHITE, TFT_BLUE);
  } else if (temp >= 18 && temp <= 22) {
    // if the temperature is greater than or equal to 18 and less than or equal to 22 the screen background will turn green, and the text format will be changed so that the background of the text matches with the background of the screen.
    // the colour green is indicating to the user that the ideal temperature has been reached.
    // the if statement for the variable automatic_mode is activated when true. This statement is determined by the user clicking on a switch on the Arduino dashboard in this temperature condition both the fan and heater will turn off (LED light on and set to colour red).
    if (automatic_mode == true) {
      digitalWrite(fan_pin, LOW);
      digitalWrite(heater_pin, LOW);
    }
    tft.fillScreen(TFT_GREEN);
    tft.setTextColor(TFT_WHITE, TFT_GREEN);
  }
  
  // set cursor function is used to position where the text will be printed on the display and the size of the text. (X,Y,font size)
  // in this case the coordinates are set to about the centre of the screen (starting from the first character).

  tft.setCursor(65, 80, 8);
  // the if statement for the variable humidity_display is activated when true. This statement is determined by the user clicking on a switch on the Arduino dashboard in this condition the humidity will be displayed instead of the temperature.
  if (humidity_display == true){
    tft.println(humidity);
  }else{
    tft.println(temp);
  }
    
  // set cursor coordinates are positioned at the top part of the screen with a smaller font. It is the title for the measurement being displayed below. 
  tft.setCursor(70, 45, 4);
  // when the user wants to see the humidity, the title will change to "Humidity", if not then title will be changed to "Temperature"
  if (humidity_display == true){
    tft.println("Humidity");
  }else{
    // set cursor have slightly different coordinates when compared to humidity coordinates, this is because the word Temperature is longer than humidity therefore it must be slightly shifted to the left along the x axis so it can fit in the middle
    tft.setCursor(50, 45, 4);
    tft.println("Temperature");
  }
  //set cursor coordinates are positioned at the top part of the screen with font size 4. It is to display if automatic mode is on or off.
  tft.setCursor(75, 180, 4);
  if (automatic_mode == true){
    tft.println("Auto ON");
  }
  
  
  // when automatic mode is off the user can choose to switch on the heater at any temperature condition. The if statement is determined by the user clicking on the heater button on the IOT dashboard if true heater will turn on (LED with colour red) and if false then heater will be off.
  if (heater == true) {
    digitalWrite(heater_pin, HIGH);
    fill_solid( leds, NUM_LEDS, CRGB::Red);
    FastLED.show();
  }
  if (heater == false) {
    digitalWrite(heater_pin, LOW);
  }
}


/*
  Since Fan is READ_WRITE variable, onFanChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanChange()  {
  // if user enables the switch fan will be on, if switch is off fan will be off.
  if (fan == true) {
    digitalWrite(fan_pin, HIGH);
  }
  if (fan == false) {
    digitalWrite(fan_pin, LOW);
  }
}

/*
  Since Heater is READ_WRITE variable, onHeaterChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHeaterChange()  {
  // this code is in the for loop since the FastLED function to set the LED colour works in the for loop.
}

/*
  Since AutomaticMode is READ_WRITE variable, onAutomaticModeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAutomaticModeChange()  {
  // if user disables auto mode both fan and heater will be turned off allowing the user to use the READ_WRITE variable Fan and Heater at any temperature condition.
  if (automatic_mode == false) {
     digitalWrite(heater_pin, LOW);
     digitalWrite(fan_pin, LOW);
  }
}

/*
  Since HumidityDisplay is READ_WRITE variable, onHumidityDisplayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityDisplayChange()  {

}





